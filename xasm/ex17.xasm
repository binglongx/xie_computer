    LDS RA, [0x4000] // length
    MOV RB, 0x4002 // pos in input
    ADD RB, RA
    MOV RC, 0x4002 // stop pos
    MOV RE, 0
loop:
    LDB RF, [RC]
    SUB RF, '0' // convert from ascii to short
    //MUL RF, RD
    MUL RE, 10
    ADD RE, RF
    INC RC
    CMP RC, RB
    JPE [end]
    JMP [loop]
end:
    MOV RA, RE
    INC RA
    MOV RB, 0x3000
    CLL [convert_int_to_string]
    MOV RC, RB
    LDS RD, [0x4000]
    CLL [reverse_string]
    HLT

// convert an int to a string in decimal.
// Input parameters:
//   RA: short to be converted;
//   RB: memory location to store the string.
// Example usage:
//   MOV RA, 4566
//   MOV RB, 0x3000
//   CLL [convert_int_to_string]
convert_int_to_string:
    MOV RC, 0 // how many digits
    MOV RE, RB
    MOV RF, RB
loop_convert_int_to_string_digit:
    INC RC
    MOV RD, RA
    MOD RD, 10
    ADD RD, '0'
    STB RD, [RB]
    CMP RA, 10
    JPL [end_loop_convert_int_to_string_digit]
    DIV RA, 10
    INC RB
    JMP [loop_convert_int_to_string_digit]
end_loop_convert_int_to_string_digit:
    // RC: number of chars in string
    // RF: location of first char
    MOV RD, RF
    CLL [reverse_string]
    RET

// reverse the string in place.
// Input parameters:
//   RC: number of chars
//   RD: location of first char
// Example usage:
//   MOV RC, 3
//   MOV RD, 0x3000
//   CLL [reverse_string]
reverse_string:
    MOV RB, RC
    DIV RB, 2
    ADD RC, RD
    SUB RC, 1
    MOV RE, 0
loop_reverse_string:
    LDB RF, [RD]
    LDB RA, [RC]
    STB RF, [RC]
    STB RA, [RD]
    INC RD
    DEC RC
    INC RE
    CMP RE, RB
    JPL [loop_reverse_string]
    RET
    
// reverse the xstring in place in [RC].
//  hint [RC]: short: number of chars
//       [RC+2]: location of first char
reverse_xstring:
    LDS RA, [RC]
    MOV RD, RC
    ADD RD, 2
    MOV RC, RA
    CLL [reverse_string]
    RET
